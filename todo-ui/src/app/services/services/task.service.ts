/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addTask } from '../fn/task/add-task';
import { AddTask$Params } from '../fn/task/add-task';
import { deleteTaskById } from '../fn/task/delete-task-by-id';
import { DeleteTaskById$Params } from '../fn/task/delete-task-by-id';
import { getTasksByUser } from '../fn/task/get-tasks-by-user';
import { GetTasksByUser$Params } from '../fn/task/get-tasks-by-user';
import { PageResponseTaskResponse } from '../models/page-response-task-response';
import { updateTaskById } from '../fn/task/update-task-by-id';
import { UpdateTaskById$Params } from '../fn/task/update-task-by-id';
import { updateTaskStatus } from '../fn/task/update-task-status';
import { UpdateTaskStatus$Params } from '../fn/task/update-task-status';

@Injectable({ providedIn: 'root' })
export class TaskService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateTaskById()` */
  static readonly UpdateTaskByIdPath = '/tasks/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTaskById()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTaskById$Response(params: UpdateTaskById$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return updateTaskById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTaskById$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTaskById(params: UpdateTaskById$Params, context?: HttpContext): Observable<number> {
    return this.updateTaskById$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `deleteTaskById()` */
  static readonly DeleteTaskByIdPath = '/tasks/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTaskById()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTaskById$Response(params: DeleteTaskById$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteTaskById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTaskById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTaskById(params: DeleteTaskById$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteTaskById$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `updateTaskStatus()` */
  static readonly UpdateTaskStatusPath = '/tasks/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTaskStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateTaskStatus$Response(params: UpdateTaskStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return updateTaskStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTaskStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateTaskStatus(params: UpdateTaskStatus$Params, context?: HttpContext): Observable<number> {
    return this.updateTaskStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getTasksByUser()` */
  static readonly GetTasksByUserPath = '/tasks';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTasksByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTasksByUser$Response(params?: GetTasksByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseTaskResponse>> {
    return getTasksByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTasksByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTasksByUser(params?: GetTasksByUser$Params, context?: HttpContext): Observable<PageResponseTaskResponse> {
    return this.getTasksByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseTaskResponse>): PageResponseTaskResponse => r.body)
    );
  }

  /** Path part for operation `addTask()` */
  static readonly AddTaskPath = '/tasks';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addTask()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addTask$Response(params: AddTask$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return addTask(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addTask$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addTask(params: AddTask$Params, context?: HttpContext): Observable<number> {
    return this.addTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

}
